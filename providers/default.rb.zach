include Chef::Mixin::ShellOut

def whyrun_supported?
  true
end

def load_current_resource
  @zpool = Chef::Resource::Zpool.new(new_resource.name)

  zpool_param_names = %w(name disks log_disks cache_disks mountpoint autoexpand)

  zpool_param_names.each do |param_name|
    @zpool.send(param_name, new_resource.send(param_name))
  end

  @zpool.info(info)
  @zpool.state(state)
end

def zpool_add(disk)
  shell_out!("zpool add #{args_from_resource_add(new_resource)} #{@zpool.name} #{disk}")
end

# rubocop:disable Metrics/AbcSize
# Score without is [16.16/15]
def zpool_create
  zpool_command = "zpool create #{args_from_resource_create(new_resource)} #{@zpool.name} #{@zpool.disks.join(' ')}"
  zpool_command << " log #{@zpool.log_disks.join(' ')}" unless @zpool.log_disks.nil?
  zpool_command << " cache #{@zpool.cache_disks.join(' ')}" unless @zpool.cache_disks.nil?
  shell_out!(zpool_command)
end
# rubocop:enable

def zpool_destroy
  shell_out!("zpool destroy #{args_from_resource(new_resource)} #{@zpool.name}")
end

action :create do
  if created?
    if online?
      @zpool.disks.each do |disk|
        short_disk = disk.split('/').last

        next if vdevs.include?(disk) || vdevs.include?(short_disk)

        converge_by("Adding #{disk} to pool #{@zpool.name}") do
          zpool_add(disk)
        end
      end
    else
      Chef::Log.warn("Zpool #{@zpool.name} is #{@zpool.state}")
    end
  else
    converge_by("Creating zpool #{@zpool.name}") do
      zpool_create
    end
  end
end

action :destroy do
  if created?
    converge_by("Destroying zpool #{@zpool.name}") do
      zpool_destroy
    end
  end
end

private

def args_from_resource_add(new_resource)
  args = []
  args << '-f' if new_resource.force
  args << '-r' if new_resource.recursive

  # Properties
  args << '-o'
  args << format('ashift=%s', new_resource.ashift)

  args.join(' ')
end

def args_from_resource_create(new_resource)
  args = args_from_resource_add(new_resource).split(' ')

  if new_resource.name == new_resource.mountpoint
    args << "-m /#{new_resource.mountpoint}"
  else
    args << "-m #{new_resource.mountpoint}"
  end

  args << '-o autoexpand=on' if new_resource.autoexpand

  args.join(' ')
end

def created?
  @zpool.info.exitstatus.zero?
end

def state
  @zpool.info.stdout.chomp
end

def info
  shell_out("zpool list -H -o health #{@zpool.name}")
end

def vdevs
  @vdevs ||= shell_out("zpool list -v -H #{@zpool.name}").stdout.lines.map do |line|
    next unless line.chomp =~ /^[\t]/
    line.chomp.split("\t")[1]
  end.compact
  @vdevs
end

def online?
  @zpool.state == 'ONLINE'
end
